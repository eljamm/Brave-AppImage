name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Brave version tag ("latest" or "vX.Y.Z")'
        required: true
        default: "latest"
        type: string
      rebuild:
        description: "Force rebuilding release"
        required: true
        default: false
        type: boolean
  schedule:
    - cron: "45 */4 * * mon-fri"
    - cron: "30 5,9 * * tue,thu"
    - cron: "05 */12 * * sat,sun"
  push:
    branches:
      - "master"

jobs:
  Brave:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download Brave
        continue-on-error: true
        run: |
          set -u

          # --------------------------- #
          # ---  initial variables  --- #
          # --------------------------- #

          USER=eljamm
          REPO=Brave-AppImage

          TAG_INPUT=${{ inputs.tag }}
          REBUILD_INPUT=${{ inputs.rebuild }}

          # ----------------------------- #
          # ---  get release version  --- #
          # ----------------------------- #

          VERSION=${TAG_INPUT:-"latest"}  # if no manual input, use "latest" by default
          REBUILD=${REBUILD_INPUT:-false}

          echo "< Fetching version >"

          if [ $VERSION == "latest" ]; then
              VERSION="$(curl -s https://api.github.com/repos/brave/brave-browser/releases?per_page=1 | jq -r '.[0].tag_name')"
          fi

          BRAVE="$(curl -s "https://api.github.com/repos/brave/brave-browser/releases/tags/${VERSION}")"

          # --------------------------------- #
          # ---  check release existence  --- #
          # --------------------------------- #

          ID="$(curl -s "https://api.github.com/repos/${USER}/${REPO}/releases/tags/${VERSION}" | jq -r .id)"

          if [ "$ID" != "null" ] && [ $REBUILD = false ]; then
              echo -e "\nRelease ${VERSION} already exists. Quitting ..."
              UPLOAD_CONTENT=false
          else
              echo "< Building new release >"
              UPLOAD_CONTENT=true
          fi

          if [ $UPLOAD_CONTENT = true ]; then
            # -------------------------------- #
            # ---  determine release type  --- #
            # -------------------------------- #

            TYPE="$(echo "$BRAVE" | jq -r .name | cut -c 1-7)"

            echo "< This is a '$TYPE' release >"

            if [[ $TYPE == "Nightly" ]]; then
                BRAVE_PRERELEASE=true
                BRAVE_TYPE=nightly
                APPDIR=AppDir-Nightly
                ICON=brave-browser-nightly

            elif [[ $TYPE =~ "Dev" ]]; then
                BRAVE_PRERELEASE=true
                BRAVE_TYPE=dev
                APPDIR=AppDir-Dev
                ICON=brave-browser-dev

            elif [[ $TYPE =~ "Beta" ]]; then
                BRAVE_PRERELEASE=true
                BRAVE_TYPE=beta
                APPDIR=AppDir-Beta
                ICON=brave-browser-beta

            elif [[ $TYPE == "Release" ]]; then
                # mark as release
                BRAVE_PRERELEASE=false
                BRAVE_TYPE=stable
                APPDIR=AppDir
                ICON=brave-browser
            fi

            # ------------------------------------------------- #
            # ---  extract linux url without debug symbols  --- #
            # ------------------------------------------------- #

            LINKS="$(echo "$BRAVE" | jq -r '.assets[].browser_download_url' | grep linux | grep -v symbols)"

            if [ $? -eq 0 ]; then
                echo "UPLOAD_CONTENT=true" >>$GITHUB_ENV
            else
                echo -e "\nDownload links unavilable for linux. Quitting ..."
                echo "UPLOAD_CONTENT=false" >>$GITHUB_ENV
            fi

            # ----------------------- #
            # ---  download urls  --- #
            # ----------------------- #

            echo "< Downloading files >"

            wget -q --show-progress --progress=dot:giga $LINKS

            # ----------------------- #
            # ---  verify hashes  --- #
            # ----------------------- #

            sha256sum -c *.sha256

            if [ $? -ne 0 ]; then
                echo -e "\nBad checksums. Quitting ..."
                echo "UPLOAD_CONTENT=false" >>$GITHUB_ENV
            fi

            # ---------------------------- #
            # ---  copy zip to AppDir  --- #
            # ---------------------------- #

            if [ $UPLOAD_CONTENT = true ]; then
              echo "< Copying files to AppDir >"

              unzip -q *.zip -d $APPDIR && rm -r *.zip *.zip.sha256
              cd $APPDIR
              ln -sr product*logo*128*.png "$ICON.png"
              cd ..

              # ------------------------- #
              # ---  bundle Appimage  --- #
              # ------------------------- #

              echo "< Bundling Appimage >"

              echo "AppDir: $APPDIR" && ls -al
              ls -al "$APPDIR"

              wget -q --show-progress --progress=dot:mega -O appimagetool \
                  https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
              chmod +x ./appimagetool

              ./appimagetool --comp gzip "$APPDIR" -n -u \
                  "gh-releases-zsync|$USER|$REPO|$BRAVE_TYPE|Brave*.AppImage.zsync" \
                  "Brave-$BRAVE_TYPE-$VERSION-x86_64.AppImage"

              mkdir dist && mv Brave*.AppImage* dist/.

              echo "< Done >"
            fi

            # ------------------------------------- #
            # ---  store environment variables  --- #
            # ------------------------------------- #

            echo "BRAVE_PRERELEASE=$BRAVE_PRERELEASE" >>$GITHUB_ENV
            echo "BRAVE_NAME=${BRAVE_TYPE^}" >>$GITHUB_ENV
            echo "BRAVE_TYPE=$BRAVE_TYPE" >>$GITHUB_ENV
            echo "BRAVE_VERSION=$VERSION" >>$GITHUB_ENV
          fi

      - name: Upload artifact
        if: ${{ env.UPLOAD_CONTENT }}
        uses: actions/upload-artifact@v3
        with:
          name: brave-continuous.AppImage
          path: "dist"

      - name: ${{ env.BRAVE_NAME }}
        if: ${{ env.UPLOAD_CONTENT }}
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: Brave AppImage ${{ env.BRAVE_NAME }} ${{ env.BRAVE_VERSION }}
          automatic_release_tag: ${{ env.BRAVE_VERSION }}
          prerelease: ${{ env.BRAVE_PRERELEASE }}
          files: |
            dist/
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: ${{ env.BRAVE_NAME }} Continuous
        if: ${{ env.UPLOAD_CONTENT }}
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: Brave AppImage Continuous ${{ env.BRAVE_NAME }}
          automatic_release_tag: ${{ env.BRAVE_TYPE }}
          prerelease: true
          files: |
            dist/
          repo_token: ${{ secrets.GITHUB_TOKEN }}
